{"is_source_file": true, "format": "TypeScript", "description": "This file provides API functions for managing chat data, including fetching chats, creating new chats, and retrieving individual chat details. It also includes mock implementations for fallback behavior.", "external_files": ["./client", "$lib/types"], "external_methods": ["http", "getApiBase"], "published": ["fetchChats", "createChat", "fetchChat"], "classes": [], "methods": [{"name": "export async function fetchChats(): Promise<Chat[]> { fetchChats", "description": "Fetches all chats for the current user, or returns mock data if API base is not available.", "scope": "", "scopeKind": ""}, {"name": "export async function createChat(payload: CreateChatRequest): Promise<Chat> { createChat", "description": "Creates a new chat with specified participants, or returns mock data if API base is not available.", "scope": "", "scopeKind": ""}, {"name": "export async function fetchChat(chatId: string): Promise<Chat> { fetchChat", "description": "Retrieves a single chat by its ID, or uses mock data if API base is unavailable.", "scope": "", "scopeKind": ""}, {"name": "function delay(ms: number) { delay", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "async function mockCreateChat(payload: CreateChatRequest): Promise<Chat> { mockCreateChat", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "async function mockFetchChats(): Promise<Chat[]> { mockFetchChats", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["getApiBase", "http<Chat[]>", "http<Chat>", "mockFetchChats", "mockCreateChat", "delay"], "search-terms": ["chat API", "fetchChats", "createChat", "mockFetchChats", "mockCreateChat", "real-time messaging", "frontend chat functions"], "state": 2, "file_id": 19, "knowledge_revision": 42, "git_revision": "", "ctags": [{"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "createChat", "scopeKind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "fetchChat", "scopeKind": "function"}, {"_type": "tag", "name": "base", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^  const base = getApiBase();$/", "language": "TypeScript", "kind": "constant", "scope": "fetchChats", "scopeKind": "function"}, {"_type": "tag", "name": "chat", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^  const chat: Chat = {$/", "language": "TypeScript", "kind": "constant", "scope": "mockCreateChat", "scopeKind": "function"}, {"_type": "tag", "name": "createChat", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^export async function createChat(payload: CreateChatRequest): Promise<Chat> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "delay", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^function delay(ms: number) {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "fetchChat", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^export async function fetchChat(chatId: string): Promise<Chat> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "fetchChats", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^export async function fetchChats(): Promise<Chat[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "mockChats", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^let mockChats: Chat[] = [$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "mockCreateChat", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^async function mockCreateChat(payload: CreateChatRequest): Promise<Chat> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "mockFetchChats", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^async function mockFetchChats(): Promise<Chat[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "updatedAt", "path": "/home/kavia/workspace/code-generation/real-time-messaging-platform-22513-22522/chatting_app_frontend/src/lib/api/chats.ts", "pattern": "/^    updatedAt: new Date().toISOString()$/", "language": "TypeScript", "kind": "constant", "scope": "mockCreateChat", "scopeKind": "function"}], "hash": "0c5f264dba04cd43f099a7ef9e4482fd", "format-version": 4, "code-base-name": "chatting_app_frontend", "filename": "chatting_app_frontend/src/lib/api/chats.ts", "fields": [{"name": "let mockChats: Chat[] = [", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"42": ""}]}